// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type GrantInitParameters struct {

	// The privilege name of the grant. It can be both related to databases or graphs. See available actions below for valid values. Please read the offical documentation for more information.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// The name of the database or graph associated with the grant. it can be "*" or the specific database or graph name.
	Graph *string `json:"graph,omitempty" tf:"graph,omitempty"`

	// The resource associated with the grant. Valid values are (depending on the type of action) all_labels, all_properties,graph,database,label(<value>),property(<value>).
	Resource *string `json:"resource,omitempty" tf:"resource,omitempty"`

	// The role associated with the grant.
	Role *string `json:"role,omitempty" tf:"role,omitempty"`

	// In the case of graph related grant, you can specify the segment of the grant. Valid values are NODE(*), RELATIONSHIP(*), NODE(<value>), RELATIONSHIP(<value>).
	Segment *string `json:"segment,omitempty" tf:"segment,omitempty"`
}

type GrantObservation struct {

	// The privilege name of the grant. It can be both related to databases or graphs. See available actions below for valid values. Please read the offical documentation for more information.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// The name of the database or graph associated with the grant. it can be "*" or the specific database or graph name.
	Graph *string `json:"graph,omitempty" tf:"graph,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The resource associated with the grant. Valid values are (depending on the type of action) all_labels, all_properties,graph,database,label(<value>),property(<value>).
	Resource *string `json:"resource,omitempty" tf:"resource,omitempty"`

	// The role associated with the grant.
	Role *string `json:"role,omitempty" tf:"role,omitempty"`

	// In the case of graph related grant, you can specify the segment of the grant. Valid values are NODE(*), RELATIONSHIP(*), NODE(<value>), RELATIONSHIP(<value>).
	Segment *string `json:"segment,omitempty" tf:"segment,omitempty"`
}

type GrantParameters struct {

	// The privilege name of the grant. It can be both related to databases or graphs. See available actions below for valid values. Please read the offical documentation for more information.
	// +kubebuilder:validation:Optional
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// The name of the database or graph associated with the grant. it can be "*" or the specific database or graph name.
	// +kubebuilder:validation:Optional
	Graph *string `json:"graph,omitempty" tf:"graph,omitempty"`

	// The resource associated with the grant. Valid values are (depending on the type of action) all_labels, all_properties,graph,database,label(<value>),property(<value>).
	// +kubebuilder:validation:Optional
	Resource *string `json:"resource,omitempty" tf:"resource,omitempty"`

	// The role associated with the grant.
	// +kubebuilder:validation:Optional
	Role *string `json:"role,omitempty" tf:"role,omitempty"`

	// In the case of graph related grant, you can specify the segment of the grant. Valid values are NODE(*), RELATIONSHIP(*), NODE(<value>), RELATIONSHIP(<value>).
	// +kubebuilder:validation:Optional
	Segment *string `json:"segment,omitempty" tf:"segment,omitempty"`
}

// GrantSpec defines the desired state of Grant
type GrantSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GrantParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider GrantInitParameters `json:"initProvider,omitempty"`
}

// GrantStatus defines the observed state of Grant.
type GrantStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GrantObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Grant is the Schema for the Grants API. Neo4j grant
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,neo4j}
type Grant struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.action) || (has(self.initProvider) && has(self.initProvider.action))",message="spec.forProvider.action is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.graph) || (has(self.initProvider) && has(self.initProvider.graph))",message="spec.forProvider.graph is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.role) || (has(self.initProvider) && has(self.initProvider.role))",message="spec.forProvider.role is a required parameter"
	Spec   GrantSpec   `json:"spec"`
	Status GrantStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GrantList contains a list of Grants
type GrantList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Grant `json:"items"`
}

// Repository type metadata.
var (
	Grant_Kind             = "Grant"
	Grant_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Grant_Kind}.String()
	Grant_KindAPIVersion   = Grant_Kind + "." + CRDGroupVersion.String()
	Grant_GroupVersionKind = CRDGroupVersion.WithKind(Grant_Kind)
)

func init() {
	SchemeBuilder.Register(&Grant{}, &GrantList{})
}
